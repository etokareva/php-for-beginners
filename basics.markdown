# Базовый синтаксис

## Введение

Изучение любого языка программирования начинается с классической и самой простой программы “Hello, world”:


    <?php
    echo "Hello, world!";

Любой PHP-скрипт начинается с открывающего тэга `<?php`. Не надо писать другой код на одной строке с открывающим тэгом (из этого правила есть исключения, но о них позже). С помощью конструкции `echo` происходит отображение информации. 

Попробуем немного расширить первый пример:

    <?php
    $myName = 'Jack';
    echo 'Hello, world! My name is ' . $myName . ' I am the new superstar!';

`$myName` – это переменная. Их используют для осуществления доступа к данным. В ходе выполнения программы значение переменных можно изменять. Попробуйте, например, изменить значение в кавычка на свое имя.

Обратите внимание на текст после оператора `echo` в данном примере. `.` — это знак конкатенации, он отвечает за соединение нескольких строк в одну. Заодно с его помощью можно объединять со строкой и переменные.

PHP можно использовать не только для написания отдельных скриптов. Он спроектирован таким образом, что код можно вставлять прямо в html-код.

    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8">
            <title>PHP Test</title>
        </head>
        <body>
            <?php echo '<p>Hello World</p>'; ?> 
        </body>
    </html>

Использование html-тэга `<meta charset="utf-8">` обеспечит корректное отображение русского текста в браузере. При этом важно проследить, чтобы ваш текстовый редактор сохранял файлы в кодировке utf-8.

В этом примере мы как раз видим исключения из правила «не писать другой код на одной строке с открывающим php тэгом». Если все, что мы хотим сделать, это вывести какую-то строку через PHP внутри html, то написание на одной строке — оптимальный вариант.

## Тэги

Как уже было показано выше, код на PHP окружается в специальные тэги. Рекомендуется использовать стандартные тэги:


    <?php 
    echo "code goes here";
    ?>

Стандартные тэги нельзя отключить в конфигурации, поэтому они гарантировано будут работать всегда.

Важно заметить, что закрывающий тэг необязательно и нежелательно ставить, если в файле содержится только PHP код.

В отличии от стандартных тэгов, короткие можно отключить в конфиге PHP (с помощью директивы `short_open_tag`). Поэтому их использования лучше избегать.


    <?
    ... code
    ?>


У коротких тэгов есть еще одна вариация, которая является сокращением для `echo`, совмещенного с тэгами PHP:


    <?=$variable ?>
    <?php echo $variable; ?>

Эти конструкции идентичны с точки зрения PHP.

## Переменные

Выше уже упоминалсь про переменные и для чего они нужны. Вот несколько правил, которым должны подчиняться переменные в PHP:

* переменные обозначаются значком `$`
* имя переменной содержит только латинские буквы, символ _ и цифры
* имя переменной НЕ может начинаться с цифры

Переменные очень желательно называть осмысленно, т.е. так, чтобы их название тем или иным образом отражало, что именно содержится в самой переменной.

Посмотрим несколько примеров задания переменных и их названия:


    <?php
    $typical_variable_name = 'Типичное название переменной с разделением через подчеркивание.';
    $camelCaseStyleVariableName = 'Немного другой стиль именования.';
    $_anotherOne = 42;
    $_anotherOne2Or3 = true;

В PHP переменная может быть одного из 8 типов:

* Скалярные (простые): `boolean`, `string`, `integer`, `float`.
* Составные: `array`, `object`.
* Специальные: `resource`, `null`.

Интерпретатор языка сам определяет, какой тип у переменной, специально задавать это не нужно. Более того, он будет сам переводить переменные из одного типа в другой в зависимости от данных или производимых операций, но об этом еще будет позже. Пока посмотрим, как задаются переменные скалярных типов:


    <?php
    // boolean отвечает за хранение true или false
    $booleanVariable = true;

    // в integer само собой хранятся целые числа
    $integerVariable = 42;

    // float позволяет хранить дробные значения
    $floatOne = 1.05;

    // string говорит сам за себя
    $stringOfCourse = 'текст сообщения';

    // сразу глянем и на array, позволяющий работать с наборами данных
    // тут приведен синтаксим массивов для PHP, начиная с версии 5.4
    $arrayOfValues = [
        'name' => 'Neo',
        'fullName' => 'Mr. Anderson',
        'friends' => [
            'Trinity',
            'Morpheus',
        ],
    ];

    // специальный тип null означает пустоту, т.е. незаданное значение
    // часто используется для того, чтобы подготовить переменную для будущего использования
    $forFutureUse = null;

Про resource и object мы еще поговорим отдельно.

## Комметарии к коду

В примере кода задания переменных комментарии уже присутствовали. Там был пример однострочных комментариев, т.е. действующих только на ту строку, в которой они присутствует. Ниже будут другие примеры того, как можно оформлять и использовать комментарии к коду:


    <?php
    // Комментарий в одну строчку

    /* Многострочные комментарии 
    оформляются
    таким образом */

    /**
    * API Documentation Example – так оформляются описания к методам и функциям
    *
    * @param string $bar
    */
    function foo($bar) { }

    $comments = true;  /* Чем больше комментариев, тем проще разобраться потом. 
    Но код надо стараться писать так, чтобы он был понятен и без комментариев. */

    /* В этом случае сначала следует комментарий, на следующей строчке действие */
    $action_first = 0;

    $action_first = 1;  // на одной строке действие идет первым

А вот пример распространненных ошибок при работе с комментариями:


    <?php
    /* this is 
    commented */ but this is not */


    // This is also a single line comment 
    // New line comment ?> Here new line comment dont work, and this will be printed


## Операторы

Операторами в PHP, как и многих других языках программирования, называются по сути элементарные действия, которые могут принимать одно или несколько значений или выражений и преобразовывать их к новому результату. Звучит сложнее, чем есть на самом деле. Операторами, например, называются сложение, умножение и другие подобные действия.

Операторы делят на следующие:

* унарные, т.е. принимающие только одно значение, например, `!` – логический оператор «не»
* бинарные соответственно принимающие два параметра, таких большинство: `+`, `*` и многие другие
* тернарный оператор только один и он является сокращением условного оператора: `? :`

### Арифметические операторы

Работают так же, как и в привычных математических выражениях.


    <?php
    echo 2 + 2; // 4
    echo 3 - 2; // 1
    echo 1 * 2; // 2
    echo 4 / 2; // 2
    echo -2; // -2
    echo 3 % 2; // 1 (Остаток от деления)

Стоит отметить, что оператор `/` будет возвращать значение типа `float`. Исключением будет ситуация, когда оба операнда (делимое и делитель) будут типа `integer`, при этом результат деления будет целым числом без дробной части, тогда тип результата будет `integer`.

При попытке деления на ноль будет выводиться ошибка: `PHP Warning: Division by zero`.

Операнды остатка от деления `%` конвертируются в `integer` за счет отбрасывания дробной части до выполнения операции. А результат деления по модулю будет того же знака, что и делимое, т.е. результат `$a % $b` будет того же знака, что и `$a`.

### Присвоение

Оператор присвоения обозначается `=`, примеры работы с ним уже были выше. Используют его для задания значений переменным. Т.е. операнду слева от оператора присваивается значение выражения справа.

Присвоение может комбинироваться с арифмитическими операторами или конкатенацией строк. Например:


    <?php
    $a = 3;
    $a += 5; // 8

    $a *= 7; // 56

Отдельно стоит рассмотреть присваивание по ссылке. В отличии от предыдущих примеров в этом случае в новой переменной будет содержаться не копия предыдущего значения, а именно ссылка на него. Это проще понять на примере:


    <?php
    $a = 3;
    $b = &$a; // $b — ссылка на $a

    print "$a\n"; // 3
    print "$b\n"; // 3

    $a = 4; // изменим $a

    print "$a\n"; // 4
    print "$b\n"; // 4 , так как $b — это ссылка на $a


### Операторы сравнения

Как понятно из названия следующий набор операторов позволяет сравнивать значения. Результатом работы оператора всегда будет значение типа `boolean`, т.е. либо `true`, либо `false`.


    <?php
    $a == $b; // равенство — TRUE если $a равно $b после приведения типов.
    $a === $b; // идентичность — TRUE если $a равно $b, и они обе одного типа.
    $a != $b; // не равны — TRUE если $a не равно $b после приведения типов
    $a !== $b; // не идентичны — TRUE если $a не равно $b, или они оба разных типов
    $a < $b;
    $a > $b;
    $a <= $b;
    $a >= $b;

При сравнение есть несколько нюансов, про которые полезно знать:

* при сравнении числа и строки (или, если сравнение содержит строку, содержимое которой представляет собой число), оба операнда будут приводиться к числу
* при сравнении с помощью `===` и `!==` приведение типов, конечно, происходить не будет

Еще один важный момент — это приоритет операторов. Например, в выражении `1 + 5 * 3` ответ будет `16`, а не `18`, потому что приоритет у умножения выше, чем у сложения. Управлять приоритетом можно с помощью скобок. Тогда выражение `(1 + 5) * 3` равно 18.

Подробнее о приоритетах операторов можно посмотреть в [официальном мануале](http://ru.php.net/manual/ru/language.operators.precedence.php).

